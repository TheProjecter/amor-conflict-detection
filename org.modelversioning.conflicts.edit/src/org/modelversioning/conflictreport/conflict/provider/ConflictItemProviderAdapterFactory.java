/**
 * Copyright (c) 2011 modelversioning.org
 * All rights reserved. This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html
 */
package org.modelversioning.conflictreport.conflict.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemColorProvider;
import org.eclipse.emf.edit.provider.IItemFontProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.modelversioning.conflictreport.conflict.util.ConflictAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ConflictItemProviderAdapterFactory extends ConflictAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ConflictItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
		supportedTypes.add(IItemColorProvider.class);
		supportedTypes.add(IItemFontProvider.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelversioning.conflictreport.conflict.MetamodelViolation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetamodelViolationItemProvider metamodelViolationItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelversioning.conflictreport.conflict.MetamodelViolation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetamodelViolationAdapter() {
		if (metamodelViolationItemProvider == null) {
			metamodelViolationItemProvider = new MetamodelViolationItemProvider(this);
		}

		return metamodelViolationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelversioning.conflictreport.conflict.OperationContractViolation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationContractViolationItemProvider operationContractViolationItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelversioning.conflictreport.conflict.OperationContractViolation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationContractViolationAdapter() {
		if (operationContractViolationItemProvider == null) {
			operationContractViolationItemProvider = new OperationContractViolationItemProvider(this);
		}

		return operationContractViolationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelversioning.conflictreport.conflict.UpdateUpdate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UpdateUpdateItemProvider updateUpdateItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelversioning.conflictreport.conflict.UpdateUpdate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUpdateUpdateAdapter() {
		if (updateUpdateItemProvider == null) {
			updateUpdateItemProvider = new UpdateUpdateItemProvider(this);
		}

		return updateUpdateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelversioning.conflictreport.conflict.DeleteUpdate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeleteUpdateItemProvider deleteUpdateItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelversioning.conflictreport.conflict.DeleteUpdate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeleteUpdateAdapter() {
		if (deleteUpdateItemProvider == null) {
			deleteUpdateItemProvider = new DeleteUpdateItemProvider(this);
		}

		return deleteUpdateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelversioning.conflictreport.conflict.AddAdd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddAddItemProvider addAddItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelversioning.conflictreport.conflict.AddAdd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddAddAdapter() {
		if (addAddItemProvider == null) {
			addAddItemProvider = new AddAddItemProvider(this);
		}

		return addAddItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelversioning.conflictreport.conflict.Constraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstraintItemProvider constraintItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelversioning.conflictreport.conflict.Constraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstraintAdapter() {
		if (constraintItemProvider == null) {
			constraintItemProvider = new ConstraintItemProvider(this);
		}

		return constraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelversioning.conflictreport.conflict.DeleteUse} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeleteUseItemProvider deleteUseItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelversioning.conflictreport.conflict.DeleteUse}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeleteUseAdapter() {
		if (deleteUseItemProvider == null) {
			deleteUseItemProvider = new DeleteUseItemProvider(this);
		}

		return deleteUseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelversioning.conflictreport.conflict.DeleteMove} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeleteMoveItemProvider deleteMoveItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelversioning.conflictreport.conflict.DeleteMove}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeleteMoveAdapter() {
		if (deleteMoveItemProvider == null) {
			deleteMoveItemProvider = new DeleteMoveItemProvider(this);
		}

		return deleteMoveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelversioning.conflictreport.conflict.MoveMove} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MoveMoveItemProvider moveMoveItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelversioning.conflictreport.conflict.MoveMove}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMoveMoveAdapter() {
		if (moveMoveItemProvider == null) {
			moveMoveItemProvider = new MoveMoveItemProvider(this);
		}

		return moveMoveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelversioning.conflictreport.conflict.DiagramViolation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiagramViolationItemProvider diagramViolationItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelversioning.conflictreport.conflict.DiagramViolation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiagramViolationAdapter() {
		if (diagramViolationItemProvider == null) {
			diagramViolationItemProvider = new DiagramViolationItemProvider(this);
		}

		return diagramViolationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelversioning.conflictreport.conflict.ViolatedPrecondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViolatedPreconditionItemProvider violatedPreconditionItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelversioning.conflictreport.conflict.ViolatedPrecondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViolatedPreconditionAdapter() {
		if (violatedPreconditionItemProvider == null) {
			violatedPreconditionItemProvider = new ViolatedPreconditionItemProvider(this);
		}

		return violatedPreconditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelversioning.conflictreport.conflict.MissingObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MissingObjectItemProvider missingObjectItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelversioning.conflictreport.conflict.MissingObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMissingObjectAdapter() {
		if (missingObjectItemProvider == null) {
			missingObjectItemProvider = new MissingObjectItemProvider(this);
		}

		return missingObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelversioning.conflictreport.conflict.DifferentBindingSize} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DifferentBindingSizeItemProvider differentBindingSizeItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelversioning.conflictreport.conflict.DifferentBindingSize}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDifferentBindingSizeAdapter() {
		if (differentBindingSizeItemProvider == null) {
			differentBindingSizeItemProvider = new DifferentBindingSizeItemProvider(this);
		}

		return differentBindingSizeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelversioning.conflictreport.conflict.ConditionViolation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionViolationItemProvider conditionViolationItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelversioning.conflictreport.conflict.ConditionViolation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionViolationAdapter() {
		if (conditionViolationItemProvider == null) {
			conditionViolationItemProvider = new ConditionViolationItemProvider(this);
		}

		return conditionViolationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelversioning.conflictreport.conflict.MatchingNegativeApplicationCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MatchingNegativeApplicationConditionItemProvider matchingNegativeApplicationConditionItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelversioning.conflictreport.conflict.MatchingNegativeApplicationCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMatchingNegativeApplicationConditionAdapter() {
		if (matchingNegativeApplicationConditionItemProvider == null) {
			matchingNegativeApplicationConditionItemProvider = new MatchingNegativeApplicationConditionItemProvider(this);
		}

		return matchingNegativeApplicationConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelversioning.conflictreport.conflict.UnexpectedSignifierMatch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnexpectedSignifierMatchItemProvider unexpectedSignifierMatchItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelversioning.conflictreport.conflict.UnexpectedSignifierMatch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnexpectedSignifierMatchAdapter() {
		if (unexpectedSignifierMatchItemProvider == null) {
			unexpectedSignifierMatchItemProvider = new UnexpectedSignifierMatchItemProvider(this);
		}

		return unexpectedSignifierMatchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.modelversioning.conflictreport.conflict.ConcurrentSignifierChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConcurrentSignifierChangeItemProvider concurrentSignifierChangeItemProvider;

	/**
	 * This creates an adapter for a {@link org.modelversioning.conflictreport.conflict.ConcurrentSignifierChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConcurrentSignifierChangeAdapter() {
		if (concurrentSignifierChangeItemProvider == null) {
			concurrentSignifierChangeItemProvider = new ConcurrentSignifierChangeItemProvider(this);
		}

		return concurrentSignifierChangeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (metamodelViolationItemProvider != null) metamodelViolationItemProvider.dispose();
		if (operationContractViolationItemProvider != null) operationContractViolationItemProvider.dispose();
		if (updateUpdateItemProvider != null) updateUpdateItemProvider.dispose();
		if (deleteUpdateItemProvider != null) deleteUpdateItemProvider.dispose();
		if (addAddItemProvider != null) addAddItemProvider.dispose();
		if (constraintItemProvider != null) constraintItemProvider.dispose();
		if (deleteUseItemProvider != null) deleteUseItemProvider.dispose();
		if (deleteMoveItemProvider != null) deleteMoveItemProvider.dispose();
		if (moveMoveItemProvider != null) moveMoveItemProvider.dispose();
		if (diagramViolationItemProvider != null) diagramViolationItemProvider.dispose();
		if (violatedPreconditionItemProvider != null) violatedPreconditionItemProvider.dispose();
		if (missingObjectItemProvider != null) missingObjectItemProvider.dispose();
		if (differentBindingSizeItemProvider != null) differentBindingSizeItemProvider.dispose();
		if (conditionViolationItemProvider != null) conditionViolationItemProvider.dispose();
		if (matchingNegativeApplicationConditionItemProvider != null) matchingNegativeApplicationConditionItemProvider.dispose();
		if (unexpectedSignifierMatchItemProvider != null) unexpectedSignifierMatchItemProvider.dispose();
		if (concurrentSignifierChangeItemProvider != null) concurrentSignifierChangeItemProvider.dispose();
	}

}
